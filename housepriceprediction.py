# -*- coding: utf-8 -*-
"""UsakEvFiyatTahmini

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hfq3DuQmFjkAy5M-Zw_4Ex86CcjUqbth

**Veri Setini Yükleme**

Sahibinden.com sitesinden aldığımız Uşak ilinde bulunan 100 daireyi içeren veri setimizi yüklüyoruz.
"""

from google.colab import drive
drive.mount('/content/drive')

adres = "/content/drive/MyDrive/kerasders/dataset.csv"
!cp "{adres}" .

"""Gerekli kütüphaneleri ekliyoruz."""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Veri Setini Görselleştirme**

Excel'de hazırlamış olduğum veri setinin ilk 10 verisini görselleştiriyoruz.

"""

df= pd.read_csv('/content/veriseti.csv')
df.head(10)

"""Kat Sayısı sütununda bulunan verilerimizi daire grafiğinde yüzdelik dilimler ile görselleştiriyoruz."""

fig = plt.figure(figsize=(5,15))
df['Kat Sayısı'].value_counts().plot(kind = 'pie',autopct='%.1f%%');
plt.ylabel("Kat Sayısı", fontsize = 20)

"""Kat Sayısı sütunundaki değerlerin, Fiyat değerine göre değişimlerini, Site İçerisinde bulunup, bulunmama durumuna göre ayırarak görselleştiriyoruz."""

sns.scatterplot(x = 'Fiyat', y = 'Kat Sayısı', hue = 'Site İçerisinde', data = df)

"""Bina Yaşı sütunundaki değerlerimizin, Fiyat değerine göre değişimlerini görselleştiriyoruz."""

sns.barplot(x = "Bina Yaşı", y = "Fiyat", data = df)

"""Verilerimizin dağılım değerlerini görselleştiriyoruz."""

df.describe().T

"""Verimizin sütunları:"""

df.columns

"""**Verileri Eşleştirme**

Bu aşamada verilerimizi X(değerler) ve Y(hedef değer) şeklinde ayırıyoruz.

Bu işlemi yaparken y değerini Fiyat sütunu, X değerini ise Fiyat sütunu dışında kalan tüm sütunlar olarak belirliyoruz.
"""

X = df.loc[:,df.columns!='Fiyat']
X.head()

y = df['Fiyat']
y.head()

"""Bu aşamada verilerimizi eğitim ve test verisi şeklinde ayırıyoruz.

Test verisi olarak verilerimizin %30'luk dilimini kullanıyoruz.
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = None)

"""Verilerimizi ön işleme yapıyoruz. 

Her bir özelliğin ortalama değerini kaldırarak verileri ortalamak için dönüştürüp sabit olmayan özellikleri standart sapmalarına bölerek ölçeklendirme işlemi gerçekleştiriyoruz.
"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**Modelin Kurulması**

İlk olarak gerekli kütüphaneleri ekliyoruz.
"""

import pandas as pd
import xgboost as xgb
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
from sklearn import model_selection

"""Modeli eğitmek için bu aşamada XGBoost Regressor ile Doğrusal Regresyonu kullandım."""

xgb = XGBRegressor(objective ='reg:linear', 
                  n_estimators = 10, seed = 123)

"""Modelimizi eğitirken alabileceği parametreler için belirli değerler ekledim."""

params = {"colsample_bytree":[0.4,0.5,0.6],
         "learning_rate":[0.01,0.02,0.09],
         "max_depth":[2,3,4,5,6],
         "n_estimators":[100,200,500,2000]}

"""Modelimizi tanımlıyoruz."""

model = GridSearchCV(xgb, params, cv = 10, n_jobs = -1, verbose = 2)

"""Modelimizi Eğitiyoruz."""

model.fit(X_train, y_train)

"""Model için en iyi parametreleri öğreniyoruz."""

model.best_params_

"""Öğrendiğimiz bu en iyi parametreler ile bir model oluşturuyoruz."""

xgb1 = XGBRegressor(colsample_bytree = 0.4, learning_rate = 0.02, max_depth = 2, n_estimators = 200)

"""Yeni oluşturduğumuz modeli eğitiyoruz."""

model_xgb = xgb1.fit(X_train, y_train)

"""Model için tahminlerimizi oluşturuyoruz."""

pred = model_xgb.predict(X_test)

"""Tahmin edilen fiyat değerleri ile gerçek değerleri karşılaştırıyoruz."""

j=0
for i in y_test:
  print("Gerçek Fiyat:",i , " Tahmin Fiyat:",int(pred[j]))
  j=j+1

"""Modelimizin test başarısını öğreniyoruz."""

model_xgb.score(X_test, y_test)

"""Modelimizin eğitim başarısını öğreniyoruz."""

model_xgb.score(X_train, y_train)

"""Modelimiz için Ortalama Mutlak Hata (MAE) ile Ortalama Mutlak Hata Karekökü (RMSE) değerlerini öğreniyoruz."""

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, pred)))